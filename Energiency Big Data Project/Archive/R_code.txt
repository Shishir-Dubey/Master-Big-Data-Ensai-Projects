### Installation of packages and loading them ###########################
#########################################################################

#### Installation of necessary packages, need to do it only one time

#install.packages("corrplot")
# install.packages("caret")
#install.packages("randomForest")
# install.packages("MASS")
# install.packages("rpart")
# install.packages("e1071")
#install.packages("glmnet")
#install.pacakges("plotly")
#install.packages("missMDA")
#### Loading the necessary packages

library("MASS")
library("rpart")
library("randomForest")
library("e1071")
library("glmnet")
library(plotly)
library(ggplot2)
library(missMDA)


##############################################################################
####################          set The directory           ####################
##############################################################################
setwd("/home/moustapha/Energiency Big Data Project/Archive")

## loading the data set resampled in one hour interval###

data = read.table("all1h1.csv", header = TRUE, sep = ",")

DateTS <- as.POSIXlt(data$X, format = "%Y-%m-%d %H:%M:%S")

data$X = DateTS ; colnames(data)[1] = "date" ;rownames(data) = data$date





### First View of the Data

summary(data)

graph1 <- ggplot() +
  geom_line(data = data, aes(x = date, y = prodh, color = "prodh")) +
  geom_line(data = data, aes(x = date, y = elec, color = "elec")) +
  geom_line(data = data, aes(x = date, y = (planstop*10), color = "planstop")) +
  geom_line(data = data, aes(x = date, y = prod, color = "prod"))
graph1
ggplotly()


# reshaping the gram for add it in the plot
data$gram = ifelse(data$gram > 100,(data$gram) / 10000,data$gram)

graph2 <- ggplot() +
  geom_line(data = data, aes(x = date, y = prodh, color = "prodh")) +
  geom_line(data = data, aes(x = date, y = elec, color = "elec")) +
  geom_line(data = data, aes(x = date, y = (planstop*10), color = "planstop")) +
  geom_line(data = data, aes(x = date, y = prod, color = "prod")) +
  geom_line(data = data, aes(x = date, y = gram, color = "gram"), color="black")
graph2
ggplotly()

summary(data)


## selecting the Data set containing only the complete plan stop
nomissing = data[which(is.na(data$planstop) == F),]
summary(nomissing)

graph3 <- ggplot() +
  geom_line(data = nomissing, aes(x = date, y = prodh, color = "prodh")) +
  geom_line(data = nomissing, aes(x = date, y = elec, color = "elec")) +
  geom_line(data = nomissing, aes(x = date, y = (planstop*10), color = "planstop")) +
  geom_line(data = nomissing, aes(x = date, y = prod, color = "prod")) +
  geom_line(data = nomissing, aes(x = date, y = gram), color="black") +
  theme(legend.position="bottom")
graph3
ggplotly()

### according to the summary and the plot we will consider the variables that have less missing values
## it is prodh and elec
### we will also consider the data up to "2016-01-26 07:00:00"

data1 = nomissing[1:which(nomissing$date == "2016-01-26 07:00:00"),]
summary(data1)

## we replace the missing values in prodh by the value in prod
data1$prodh[which(is.na(data1$prodh)==T)]=data1$prod[which(is.na(data1$prodh)==T)]
summary(data1)

dd=as.data.frame(is.na(data1))
freq=table(col(dd), as.matrix(dd))
rownames(freq)=colnames(dd)
freq
freq=as.data.frame(freq)

  graph4<-ggplot(freq, aes(Var1, Freq)) +   
  geom_bar(aes(fill = Var2), position = "fill", stat="identity")+
    theme(legend.position="top")
  graph4
  ggplotly()
## it still left some missing values in prodh "48" and elec "24", we will input them with the method inputpca in missMDA

data2=data1[,c(1,2,3,5)]  ## data2 with only the interesting variables

nb= estim_ncpPCA(data2[-1],ncp.min = 0,ncp.max = 5)
nb
res= imputePCA(data2[-1], ncp = 1)
dd=as.data.frame(res$completeObs)
dd$prodh=ifelse(dd$prodh<0,0,dd$prodh)
summary(dd)

data2[-1]=dd

graph5 = ggplot()+
    geom_step(data = data2, aes(x = date, y=prodh, color="prodh"))+
    geom_line(data= data2, aes(x = date, y=elec, color="elec"))+
    geom_line(data= data2, aes(x = date, y=planstop*20, color="planstop"))
graph5
ggplotly(graph5)

## Creation of the variable faillure

## we make the assumption that when the production is less than 20 and there are no stop planned, there are a faillure.

data2$State = ifelse((data2$prodh <= 20),"Notworking","Normal")
data2$State[which(data2$State == "Notworking")] = ifelse((data2$planstop[which(data2$State ==
                                                                                  "Notworking")] == 0),"Normal","Faillure")
data2$State=as.factor(data2$State)

summary(data2)
(table(data2$State)/nrow(data2))*100

### creation of the variable first faillure
ffail=c()
test=T
for (i in 1:nrow(data2)){
  if (test==T){
      ffail[i]=data2$State[i]
      if (data2$State[i]=="Faillure"){
        test=F
      }
  } else {
            ffail[i]="fix"
            if (data2$State[i]=="Normal") {
              test=T
              ffail[i]=data2$State[i]
            }
            
  }
}
#### we will have two variables :
#### first faillure that consider only the first faillure like and the next one like a normal state
ffail=ifelse(ffail==1,"FFAIL",ffail)
ffail=ifelse(ffail==2,"Normal",ffail)
ffail2=ifelse(ffail!="FFAIL","Normal",ffail)

data2$ffail=as.factor(ffail)
(table(data2$ffail)/nrow(data2))*100

data2$ffail2=as.factor(ffail2)
(table(data2$ffail2)/nrow(data2))*100


#### for the moment we have only five variables in our data set, lets create other 
###  ones from our data set, that we will use for our modelisations

### Lets create the variable working time wich count the working time of the machine
worktime=c()
cou=0
for (i in 1:nrow(data2)){
  if(data2$State[i]=="Normal"){
    cou=cou+1
    worktime[i]=cou
  }
  else {
      cou=0
      worktime[i]=cou
  }
}

data2$worktime=worktime

### Creation of varible, for consider the production and the electricity variation

## prodh
dd=c(data2$prodh[2:nrow(data2)], NA)
delta= data2$prodh-dd
data2$prodhdelta=c(NA, delta[-nrow(data2)])

## elec
dd=c(data2$elec[2:nrow(data2)], NA)
delta= data2$elec-dd
data2$elecdelta=c(NA, delta[-nrow(data2)])

data2=na.omit(data2)
### Creation of a function, for make a transformation on our variable (log(var+1), sqrt, power2,power3,poly)

transformation = function(vect) {
  vect.log1=log(vect+1)     ## vect+1 because with log we have infinite
  vect.sqrt=sqrt(vect)
  vect.p2 = vect^2
  vect.p3 = vect^3
  vect.poly= poly(vect, degree = 5, simple = T)
  
  return (data.frame(vect.log1,vect.sqrt,vect.p2,vect.p3,vect.poly))
}

## creation of value variation between 
data=data2
### applying the function transformation on prodh and elec
# prodh
pp=transformation(data2$prodh)
colnames(pp)=paste("prodh",colnames(pp),sep = "-")
data2= data.frame(data2,pp)
# elec
pp=transformation(data2$elec)
colnames(pp)=paste("elec",colnames(pp),sep = "-")
data2= data.frame(data2,pp)

####### Decomposition of the date in months and weekdays and adding it like variables
data2$months=as.factor(months(data2$date))
data2$wday= as.factor(weekdays(data2$date))


## a function for new variable from time decalage

varcreation = function(number,data,var) {
  n = length(data[,1])
  k = which(colnames(d1) == var)
  for (i in 1:number) {
    p = c(rep(NA,i), data[,k][-c((n - i + 1):n)])
    data[length(data) + 1] = p
  }
  return (data)
}

d1 = data2



## creation of decaled state
decal=function(var, numb=24){
n = length(d1)
numb = 24
d1 = varcreation(numb,d1,var)
namm1 = paste(rep(var,numb),c(1:numb),sep = ".")
colnames(d1)[(n + 1):(n + numb)] <- paste(rep(var,numb),c(1:numb),sep = "..")
return(d1)
}

tode=colnames(d1)[-c(1)]
for (i in 1:length(tode)){
      pp=decal(tode[i],numb = 24)
      d1=pp
}

## factor probleme management
numb=24
namm1 = paste(rep("State",numb),c(1:numb),sep = "..")
namm2 = paste(rep("ffail",numb),c(1:numb),sep = "..")
namm3 = paste(rep("ffail2",numb),c(1:numb),sep = "..")
for (i in 1:numb) {
  d1[,which(colnames(d1) == namm1[i])] = as.factor(d1[,which(colnames(d1) == namm1[i])])
  levels(d1[,which(colnames(d1) == namm1[i])])=levels(d1$State)
  d1[,which(colnames(d1) == namm2[i])] = as.factor(d1[,which(colnames(d1) == namm2[i])])
  levels(d1[,which(colnames(d1) == namm2[i])])=levels(d1$ffail)
  d1[,which(colnames(d1) == namm3[i])] = as.factor(d1[,which(colnames(d1) == namm3[i])])
  levels(d1[,which(colnames(d1) == namm3[i])])=levels(d1$ffail2)
}

## creation of the working data set

df = d1
df=df[,-c(1:3,9:28)]

df = na.omit(df)

## Using DF for fit our different models

x = df[,-c(2,3,4)]
y1 = df[,2]
y2 = df[,4]
y3 = df[,3]


##########################        Descriptives statistics         ##############################
summary(y1)
pie(table(y1),labels = levels(y1), col=rainbow(2),main="Pie Chart of target in case1")

summary(y2)
pie(table(y2),labels = levels(y1), col=rainbow(2),main="Pie Chart of target in case2")

summary(y3)
pie(table(y3),labels = levels(y3), col=rainbow(3),main="Pie Chart of target in case3")
###################### Models Fitting Begining #####################################################
## first with y1 then with y2 and finally with y3
############### Logistic Model  glm  #########################
### make training and test data set  #############

n = length(y)
ind <- sample(1:n,(n / 3) * 2)
x.cal <- x[ind,]
y.cal <- y[ind]
x.test = x[-ind,]
y.test <- y[-ind]
##
glmmod = glm(y.cal ~ .,data = x.cal, family = binomial)
glmprob = predict(glmmod,newdata = x.cal,type = "response")
glmpred = ifelse(glmprob < 0.95,"Faillure","Normal")
##
table(glmpred,y.cal)
mean(as.factor(glmpred) == y.cal)

############### Specificity, sensibility, roc curve

vecthr = seq(from = 0,to = 1,by = 0.001)   ## vector of thresholding
sensibility = 0
specificity = 0
for (i in 1:length(vecthr)) {
  predicted = as.factor(ifelse(glmprob < vecthr[i],"Faillure","Normal"))
  sensibility[i] = mean(predicted[y.cal == "Faillure"] == "Faillure")
  specificity[i] = mean(predicted[y.cal == "Normal"] == "Normal")
}

plot(vecthr,sensibility,type = "l",lwd = 3,col = "blue")
lines(vecthr,specificity,lwd = 3,col = "orange")

plot(1 - specificity,sensibility,type = "l",lwd = 3)
abline(0,1)

optimalthr = vecthr[which.max(sensibility + specificity)]

points(
  1 - specificity[which.max(sensibility + specificity)],sensibility[which.max(sensibility +
                                                                                specificity)],pch = 8,cex = 3,col = "red"
)

probatest = predict(glmmod,type = "response",newdata = x.test)
predicted = as.factor(ifelse(probatest <= optimalthr,"Faillure","Normal"))

sensibility = mean(predicted[y.test == "Faillure"] == "Faillure")
specificity = mean(predicted[y.test == "Normal"] == "Normal")

table(predicted,y.test)
mean(predicted == y.test)
sensibility
specificity

lines(data1$prodh1h, type = "l", col = "blue", lwd = 2)
plot(glmprob * 40)
plot(predicted,y.test)

lines(data1$elec1h, type = "l", col = "green")
lines(data1$planstop1h, type = "l", lwd = 3)

########################## Support vector machine  ##################################